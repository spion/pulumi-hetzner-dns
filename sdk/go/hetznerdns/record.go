// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hetznerdns

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Record Resource
//
// Provides a Hetzner DNS Recrods resource to create, update and delete DNS Records.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-hetznerdns/sdk/go/hetznerdns"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := hetznerdns.LookupZone(ctx, &GetZoneArgs{
// 			Name: "zone1.online",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = hetznerdns.NewRecord(ctx, "www", &hetznerdns.RecordArgs{
// 			ZoneId: pulumi.Any(hetznerdns_zone.Z1.Id),
// 			Value:  pulumi.String("192.168.1.1"),
// 			Type:   pulumi.String("A"),
// 			Ttl:    pulumi.Int(60),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// A Record can be imported using its `id`. Use the API to get all records of a zone and then copy the id.
//
// curl "https://dns.hetzner.com/api/v1/records" \
//
// -H 'Auth-API-Token$HETZNER_DNS_API_TOKEN' | jq . {
//
//  "records"[
//
//  {
//
//  "id""3d60921a49eb384b6335766a",
//
//  "type""TXT",
//
//  "name""google._domainkey",
//
//  "value""\"anything:with:param\"",
//
//  "zone_id""rMu2waTJPbHr4",
//
//  "created""2020-08-18 19:11:02.237 +0000 UTC",
//
//  "modified""2020-08-28 19:51:41.275 +0000 UTC"
//
//  },
//
//  {
//
//  "id""ed2416cb6bc8a8055b22222",
//
//  "type""A",
//
//  "name""www",
//
//  "value""1.1.1.1",
//
//  "zone_id""rMu2waTJPbHr4",
//
//  "created""2020-08-27 20:55:38.745 +0000 UTC",
//
//  "modified""2020-08-27 20:55:38.745 +0000 UTC"
//
//  }
//
//  ] } The command used above was copied from Hetzer DNS API docs. `jq` is used for formatting and is not required. Use the `id` to import a record.
//
// ```sh
//  $ pulumi import hetznerdns:index/record:Record dkim_1 ed2416cb6bc8a8055b22222
// ```
type Record struct {
	pulumi.CustomResourceState

	// Name of the DNS record to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// Time to live of this record.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
	// The type of the record.
	Type  pulumi.StringOutput `pulumi:"type"`
	Value pulumi.StringOutput `pulumi:"value"`
	// Id of the DNS zone to create
	// the record in.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewRecord registers a new resource with the given unique name, arguments, and options.
func NewRecord(ctx *pulumi.Context,
	name string, args *RecordArgs, opts ...pulumi.ResourceOption) (*Record, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	var resource Record
	err := ctx.RegisterResource("hetznerdns:index/record:Record", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecord gets an existing Record resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordState, opts ...pulumi.ResourceOption) (*Record, error) {
	var resource Record
	err := ctx.ReadResource("hetznerdns:index/record:Record", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Record resources.
type recordState struct {
	// Name of the DNS record to create.
	Name *string `pulumi:"name"`
	// Time to live of this record.
	Ttl *int `pulumi:"ttl"`
	// The type of the record.
	Type  *string `pulumi:"type"`
	Value *string `pulumi:"value"`
	// Id of the DNS zone to create
	// the record in.
	ZoneId *string `pulumi:"zoneId"`
}

type RecordState struct {
	// Name of the DNS record to create.
	Name pulumi.StringPtrInput
	// Time to live of this record.
	Ttl pulumi.IntPtrInput
	// The type of the record.
	Type  pulumi.StringPtrInput
	Value pulumi.StringPtrInput
	// Id of the DNS zone to create
	// the record in.
	ZoneId pulumi.StringPtrInput
}

func (RecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordState)(nil)).Elem()
}

type recordArgs struct {
	// Name of the DNS record to create.
	Name *string `pulumi:"name"`
	// Time to live of this record.
	Ttl *int `pulumi:"ttl"`
	// The type of the record.
	Type  string `pulumi:"type"`
	Value string `pulumi:"value"`
	// Id of the DNS zone to create
	// the record in.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Record resource.
type RecordArgs struct {
	// Name of the DNS record to create.
	Name pulumi.StringPtrInput
	// Time to live of this record.
	Ttl pulumi.IntPtrInput
	// The type of the record.
	Type  pulumi.StringInput
	Value pulumi.StringInput
	// Id of the DNS zone to create
	// the record in.
	ZoneId pulumi.StringInput
}

func (RecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordArgs)(nil)).Elem()
}

type RecordInput interface {
	pulumi.Input

	ToRecordOutput() RecordOutput
	ToRecordOutputWithContext(ctx context.Context) RecordOutput
}

func (*Record) ElementType() reflect.Type {
	return reflect.TypeOf((**Record)(nil)).Elem()
}

func (i *Record) ToRecordOutput() RecordOutput {
	return i.ToRecordOutputWithContext(context.Background())
}

func (i *Record) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordOutput)
}

// RecordArrayInput is an input type that accepts RecordArray and RecordArrayOutput values.
// You can construct a concrete instance of `RecordArrayInput` via:
//
//          RecordArray{ RecordArgs{...} }
type RecordArrayInput interface {
	pulumi.Input

	ToRecordArrayOutput() RecordArrayOutput
	ToRecordArrayOutputWithContext(context.Context) RecordArrayOutput
}

type RecordArray []RecordInput

func (RecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Record)(nil)).Elem()
}

func (i RecordArray) ToRecordArrayOutput() RecordArrayOutput {
	return i.ToRecordArrayOutputWithContext(context.Background())
}

func (i RecordArray) ToRecordArrayOutputWithContext(ctx context.Context) RecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordArrayOutput)
}

// RecordMapInput is an input type that accepts RecordMap and RecordMapOutput values.
// You can construct a concrete instance of `RecordMapInput` via:
//
//          RecordMap{ "key": RecordArgs{...} }
type RecordMapInput interface {
	pulumi.Input

	ToRecordMapOutput() RecordMapOutput
	ToRecordMapOutputWithContext(context.Context) RecordMapOutput
}

type RecordMap map[string]RecordInput

func (RecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Record)(nil)).Elem()
}

func (i RecordMap) ToRecordMapOutput() RecordMapOutput {
	return i.ToRecordMapOutputWithContext(context.Background())
}

func (i RecordMap) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordMapOutput)
}

type RecordOutput struct{ *pulumi.OutputState }

func (RecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Record)(nil)).Elem()
}

func (o RecordOutput) ToRecordOutput() RecordOutput {
	return o
}

func (o RecordOutput) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return o
}

// Name of the DNS record to create.
func (o RecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Time to live of this record.
func (o RecordOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Record) pulumi.IntPtrOutput { return v.Ttl }).(pulumi.IntPtrOutput)
}

// The type of the record.
func (o RecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o RecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

// Id of the DNS zone to create
// the record in.
func (o RecordOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type RecordArrayOutput struct{ *pulumi.OutputState }

func (RecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Record)(nil)).Elem()
}

func (o RecordArrayOutput) ToRecordArrayOutput() RecordArrayOutput {
	return o
}

func (o RecordArrayOutput) ToRecordArrayOutputWithContext(ctx context.Context) RecordArrayOutput {
	return o
}

func (o RecordArrayOutput) Index(i pulumi.IntInput) RecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Record {
		return vs[0].([]*Record)[vs[1].(int)]
	}).(RecordOutput)
}

type RecordMapOutput struct{ *pulumi.OutputState }

func (RecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Record)(nil)).Elem()
}

func (o RecordMapOutput) ToRecordMapOutput() RecordMapOutput {
	return o
}

func (o RecordMapOutput) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return o
}

func (o RecordMapOutput) MapIndex(k pulumi.StringInput) RecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Record {
		return vs[0].(map[string]*Record)[vs[1].(string)]
	}).(RecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordInput)(nil)).Elem(), &Record{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordArrayInput)(nil)).Elem(), RecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordMapInput)(nil)).Elem(), RecordMap{})
	pulumi.RegisterOutputType(RecordOutput{})
	pulumi.RegisterOutputType(RecordArrayOutput{})
	pulumi.RegisterOutputType(RecordMapOutput{})
}
