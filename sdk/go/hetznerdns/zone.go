// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hetznerdns

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Zone Resource
//
// Provides a Hetzner DNS Zone resource to create, update and delete DNS Zones.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-hetznerdns/sdk/go/hetznerdns"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := hetznerdns.NewZone(ctx, "zone1", &hetznerdns.ZoneArgs{
// 			Ttl: pulumi.Int(3600),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// A Zone can be imported using its `id`. Log in to the Hetzner DNS web frontend, navigate to the zone you want to import, and copy the id from the URL in your browser.
//
// ```sh
//  $ pulumi import hetznerdns:index/zone:Zone zone1 rMu2waTJPbHr4
// ```
type Zone struct {
	pulumi.CustomResourceState

	// Name of the DNS zone to create. Must be a valid
	// domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
	// include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
	// rejects attempts to create a zone with a sub domain name. Use a record to
	// create the sub domain.
	Name pulumi.StringOutput `pulumi:"name"`
	// Time to live of this zone.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
}

// NewZone registers a new resource with the given unique name, arguments, and options.
func NewZone(ctx *pulumi.Context,
	name string, args *ZoneArgs, opts ...pulumi.ResourceOption) (*Zone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	var resource Zone
	err := ctx.RegisterResource("hetznerdns:index/zone:Zone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZone gets an existing Zone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneState, opts ...pulumi.ResourceOption) (*Zone, error) {
	var resource Zone
	err := ctx.ReadResource("hetznerdns:index/zone:Zone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Zone resources.
type zoneState struct {
	// Name of the DNS zone to create. Must be a valid
	// domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
	// include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
	// rejects attempts to create a zone with a sub domain name. Use a record to
	// create the sub domain.
	Name *string `pulumi:"name"`
	// Time to live of this zone.
	Ttl *int `pulumi:"ttl"`
}

type ZoneState struct {
	// Name of the DNS zone to create. Must be a valid
	// domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
	// include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
	// rejects attempts to create a zone with a sub domain name. Use a record to
	// create the sub domain.
	Name pulumi.StringPtrInput
	// Time to live of this zone.
	Ttl pulumi.IntPtrInput
}

func (ZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneState)(nil)).Elem()
}

type zoneArgs struct {
	// Name of the DNS zone to create. Must be a valid
	// domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
	// include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
	// rejects attempts to create a zone with a sub domain name. Use a record to
	// create the sub domain.
	Name *string `pulumi:"name"`
	// Time to live of this zone.
	Ttl int `pulumi:"ttl"`
}

// The set of arguments for constructing a Zone resource.
type ZoneArgs struct {
	// Name of the DNS zone to create. Must be a valid
	// domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
	// include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
	// rejects attempts to create a zone with a sub domain name. Use a record to
	// create the sub domain.
	Name pulumi.StringPtrInput
	// Time to live of this zone.
	Ttl pulumi.IntInput
}

func (ZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneArgs)(nil)).Elem()
}

type ZoneInput interface {
	pulumi.Input

	ToZoneOutput() ZoneOutput
	ToZoneOutputWithContext(ctx context.Context) ZoneOutput
}

func (*Zone) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (i *Zone) ToZoneOutput() ZoneOutput {
	return i.ToZoneOutputWithContext(context.Background())
}

func (i *Zone) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneOutput)
}

// ZoneArrayInput is an input type that accepts ZoneArray and ZoneArrayOutput values.
// You can construct a concrete instance of `ZoneArrayInput` via:
//
//          ZoneArray{ ZoneArgs{...} }
type ZoneArrayInput interface {
	pulumi.Input

	ToZoneArrayOutput() ZoneArrayOutput
	ToZoneArrayOutputWithContext(context.Context) ZoneArrayOutput
}

type ZoneArray []ZoneInput

func (ZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Zone)(nil)).Elem()
}

func (i ZoneArray) ToZoneArrayOutput() ZoneArrayOutput {
	return i.ToZoneArrayOutputWithContext(context.Background())
}

func (i ZoneArray) ToZoneArrayOutputWithContext(ctx context.Context) ZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneArrayOutput)
}

// ZoneMapInput is an input type that accepts ZoneMap and ZoneMapOutput values.
// You can construct a concrete instance of `ZoneMapInput` via:
//
//          ZoneMap{ "key": ZoneArgs{...} }
type ZoneMapInput interface {
	pulumi.Input

	ToZoneMapOutput() ZoneMapOutput
	ToZoneMapOutputWithContext(context.Context) ZoneMapOutput
}

type ZoneMap map[string]ZoneInput

func (ZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Zone)(nil)).Elem()
}

func (i ZoneMap) ToZoneMapOutput() ZoneMapOutput {
	return i.ToZoneMapOutputWithContext(context.Background())
}

func (i ZoneMap) ToZoneMapOutputWithContext(ctx context.Context) ZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneMapOutput)
}

type ZoneOutput struct{ *pulumi.OutputState }

func (ZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (o ZoneOutput) ToZoneOutput() ZoneOutput {
	return o
}

func (o ZoneOutput) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return o
}

// Name of the DNS zone to create. Must be a valid
// domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
// include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
// rejects attempts to create a zone with a sub domain name. Use a record to
// create the sub domain.
func (o ZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Time to live of this zone.
func (o ZoneOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *Zone) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

type ZoneArrayOutput struct{ *pulumi.OutputState }

func (ZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Zone)(nil)).Elem()
}

func (o ZoneArrayOutput) ToZoneArrayOutput() ZoneArrayOutput {
	return o
}

func (o ZoneArrayOutput) ToZoneArrayOutputWithContext(ctx context.Context) ZoneArrayOutput {
	return o
}

func (o ZoneArrayOutput) Index(i pulumi.IntInput) ZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Zone {
		return vs[0].([]*Zone)[vs[1].(int)]
	}).(ZoneOutput)
}

type ZoneMapOutput struct{ *pulumi.OutputState }

func (ZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Zone)(nil)).Elem()
}

func (o ZoneMapOutput) ToZoneMapOutput() ZoneMapOutput {
	return o
}

func (o ZoneMapOutput) ToZoneMapOutputWithContext(ctx context.Context) ZoneMapOutput {
	return o
}

func (o ZoneMapOutput) MapIndex(k pulumi.StringInput) ZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Zone {
		return vs[0].(map[string]*Zone)[vs[1].(string)]
	}).(ZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneInput)(nil)).Elem(), &Zone{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneArrayInput)(nil)).Elem(), ZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneMapInput)(nil)).Elem(), ZoneMap{})
	pulumi.RegisterOutputType(ZoneOutput{})
	pulumi.RegisterOutputType(ZoneArrayOutput{})
	pulumi.RegisterOutputType(ZoneMapOutput{})
}
