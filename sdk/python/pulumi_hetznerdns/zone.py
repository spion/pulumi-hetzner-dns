# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ZoneArgs', 'Zone']

@pulumi.input_type
class ZoneArgs:
    def __init__(__self__, *,
                 ttl: pulumi.Input[int],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Zone resource.
        :param pulumi.Input[int] ttl: Time to live of this zone.
        :param pulumi.Input[str] name: Name of the DNS zone to create. Must be a valid
               domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
               include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
               rejects attempts to create a zone with a sub domain name. Use a record to
               create the sub domain.
        """
        pulumi.set(__self__, "ttl", ttl)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Input[int]:
        """
        Time to live of this zone.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: pulumi.Input[int]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the DNS zone to create. Must be a valid
        domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
        include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
        rejects attempts to create a zone with a sub domain name. Use a record to
        create the sub domain.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ZoneState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Zone resources.
        :param pulumi.Input[str] name: Name of the DNS zone to create. Must be a valid
               domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
               include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
               rejects attempts to create a zone with a sub domain name. Use a record to
               create the sub domain.
        :param pulumi.Input[int] ttl: Time to live of this zone.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the DNS zone to create. Must be a valid
        domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
        include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
        rejects attempts to create a zone with a sub domain name. Use a record to
        create the sub domain.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Time to live of this zone.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)


class Zone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        ## # Zone Resource

        Provides a Hetzner DNS Zone resource to create, update and delete DNS Zones.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_hetznerdns as hetznerdns

        zone1 = hetznerdns.Zone("zone1", ttl=3600)
        ```

        ## Import

        A Zone can be imported using its `id`. Log in to the Hetzner DNS web frontend, navigate to the zone you want to import, and copy the id from the URL in your browser.

        ```sh
         $ pulumi import hetznerdns:index/zone:Zone zone1 rMu2waTJPbHr4
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Name of the DNS zone to create. Must be a valid
               domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
               include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
               rejects attempts to create a zone with a sub domain name. Use a record to
               create the sub domain.
        :param pulumi.Input[int] ttl: Time to live of this zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ZoneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Zone Resource

        Provides a Hetzner DNS Zone resource to create, update and delete DNS Zones.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_hetznerdns as hetznerdns

        zone1 = hetznerdns.Zone("zone1", ttl=3600)
        ```

        ## Import

        A Zone can be imported using its `id`. Log in to the Hetzner DNS web frontend, navigate to the zone you want to import, and copy the id from the URL in your browser.

        ```sh
         $ pulumi import hetznerdns:index/zone:Zone zone1 rMu2waTJPbHr4
        ```

        :param str resource_name: The name of the resource.
        :param ZoneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZoneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZoneArgs.__new__(ZoneArgs)

            __props__.__dict__["name"] = name
            if ttl is None and not opts.urn:
                raise TypeError("Missing required property 'ttl'")
            __props__.__dict__["ttl"] = ttl
        super(Zone, __self__).__init__(
            'hetznerdns:index/zone:Zone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            ttl: Optional[pulumi.Input[int]] = None) -> 'Zone':
        """
        Get an existing Zone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Name of the DNS zone to create. Must be a valid
               domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
               include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
               rejects attempts to create a zone with a sub domain name. Use a record to
               create the sub domain.
        :param pulumi.Input[int] ttl: Time to live of this zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZoneState.__new__(_ZoneState)

        __props__.__dict__["name"] = name
        __props__.__dict__["ttl"] = ttl
        return Zone(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the DNS zone to create. Must be a valid
        domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
        include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
        rejects attempts to create a zone with a sub domain name. Use a record to
        create the sub domain.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[int]:
        """
        Time to live of this zone.
        """
        return pulumi.get(self, "ttl")

