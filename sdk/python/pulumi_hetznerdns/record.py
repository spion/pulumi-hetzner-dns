# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RecordArgs', 'Record']

@pulumi.input_type
class RecordArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str],
                 zone_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Record resource.
        :param pulumi.Input[str] type: The type of the record.
        :param pulumi.Input[str] zone_id: Id of the DNS zone to create
               the record in.
        :param pulumi.Input[str] name: Name of the DNS record to create.
        :param pulumi.Input[int] ttl: Time to live of this record.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "zone_id", zone_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the record.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        Id of the DNS zone to create
        the record in.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the DNS record to create.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Time to live of this record.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class _RecordState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Record resources.
        :param pulumi.Input[str] name: Name of the DNS record to create.
        :param pulumi.Input[int] ttl: Time to live of this record.
        :param pulumi.Input[str] type: The type of the record.
        :param pulumi.Input[str] zone_id: Id of the DNS zone to create
               the record in.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the DNS record to create.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Time to live of this record.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the record.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the DNS zone to create
        the record in.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class Record(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # Record Resource

        Provides a Hetzner DNS Recrods resource to create, update and delete DNS Records.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_hetznerdns as hetznerdns

        zone1 = hetznerdns.get_zone(name="zone1.online")
        www = hetznerdns.Record("www",
            zone_id=hetznerdns_zone["z1"]["id"],
            value="192.168.1.1",
            type="A",
            ttl=60)
        ```

        ## Import

        A Record can be imported using its `id`. Use the API to get all records of a zone and then copy the id.

        curl "https://dns.hetzner.com/api/v1/records" \

        -H 'Auth-API-Token$HETZNER_DNS_API_TOKEN' | jq . {

         "records"[

         {

         "id""3d60921a49eb384b6335766a",

         "type""TXT",

         "name""google._domainkey",

         "value""\"anything:with:param\"",

         "zone_id""rMu2waTJPbHr4",

         "created""2020-08-18 19:11:02.237 +0000 UTC",

         "modified""2020-08-28 19:51:41.275 +0000 UTC"

         },

         {

         "id""ed2416cb6bc8a8055b22222",

         "type""A",

         "name""www",

         "value""1.1.1.1",

         "zone_id""rMu2waTJPbHr4",

         "created""2020-08-27 20:55:38.745 +0000 UTC",

         "modified""2020-08-27 20:55:38.745 +0000 UTC"

         }

         ] } The command used above was copied from Hetzer DNS API docs. `jq` is used for formatting and is not required. Use the `id` to import a record.

        ```sh
         $ pulumi import hetznerdns:index/record:Record dkim_1 ed2416cb6bc8a8055b22222
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Name of the DNS record to create.
        :param pulumi.Input[int] ttl: Time to live of this record.
        :param pulumi.Input[str] type: The type of the record.
        :param pulumi.Input[str] zone_id: Id of the DNS zone to create
               the record in.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RecordArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Record Resource

        Provides a Hetzner DNS Recrods resource to create, update and delete DNS Records.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_hetznerdns as hetznerdns

        zone1 = hetznerdns.get_zone(name="zone1.online")
        www = hetznerdns.Record("www",
            zone_id=hetznerdns_zone["z1"]["id"],
            value="192.168.1.1",
            type="A",
            ttl=60)
        ```

        ## Import

        A Record can be imported using its `id`. Use the API to get all records of a zone and then copy the id.

        curl "https://dns.hetzner.com/api/v1/records" \

        -H 'Auth-API-Token$HETZNER_DNS_API_TOKEN' | jq . {

         "records"[

         {

         "id""3d60921a49eb384b6335766a",

         "type""TXT",

         "name""google._domainkey",

         "value""\"anything:with:param\"",

         "zone_id""rMu2waTJPbHr4",

         "created""2020-08-18 19:11:02.237 +0000 UTC",

         "modified""2020-08-28 19:51:41.275 +0000 UTC"

         },

         {

         "id""ed2416cb6bc8a8055b22222",

         "type""A",

         "name""www",

         "value""1.1.1.1",

         "zone_id""rMu2waTJPbHr4",

         "created""2020-08-27 20:55:38.745 +0000 UTC",

         "modified""2020-08-27 20:55:38.745 +0000 UTC"

         }

         ] } The command used above was copied from Hetzer DNS API docs. `jq` is used for formatting and is not required. Use the `id` to import a record.

        ```sh
         $ pulumi import hetznerdns:index/record:Record dkim_1 ed2416cb6bc8a8055b22222
        ```

        :param str resource_name: The name of the resource.
        :param RecordArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RecordArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RecordArgs.__new__(RecordArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["ttl"] = ttl
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
        super(Record, __self__).__init__(
            'hetznerdns:index/record:Record',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            ttl: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            value: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'Record':
        """
        Get an existing Record resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Name of the DNS record to create.
        :param pulumi.Input[int] ttl: Time to live of this record.
        :param pulumi.Input[str] type: The type of the record.
        :param pulumi.Input[str] zone_id: Id of the DNS zone to create
               the record in.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RecordState.__new__(_RecordState)

        __props__.__dict__["name"] = name
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["type"] = type
        __props__.__dict__["value"] = value
        __props__.__dict__["zone_id"] = zone_id
        return Record(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the DNS record to create.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[int]]:
        """
        Time to live of this record.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the record.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Id of the DNS zone to create
        the record in.
        """
        return pulumi.get(self, "zone_id")

