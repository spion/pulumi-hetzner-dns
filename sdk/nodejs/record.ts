// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # hetznerdns.Record Resource
 *
 * Provides a Hetzner DNS Recrods resource to create, update and delete DNS Records.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hetznerdns from "@pulumi/hetznerdns";
 *
 * const zone1 = hetznerdns.getZone({
 *     name: "zone1.online",
 * });
 * const www = new hetznerdns.Record("www", {
 *     zoneId: hetznerdns_zone.z1.id,
 *     value: "192.168.1.1",
 *     type: "A",
 *     ttl: 60,
 * });
 * ```
 *
 * ## Import
 *
 * A Record can be imported using its `id`. Use the API to get all records of a zone and then copy the id.
 *
 * curl "https://dns.hetzner.com/api/v1/records" \
 *
 * -H 'Auth-API-Token$HETZNER_DNS_API_TOKEN' | jq . {
 *
 *  "records"[
 *
 *  {
 *
 *  "id""3d60921a49eb384b6335766a",
 *
 *  "type""TXT",
 *
 *  "name""google._domainkey",
 *
 *  "value""\"anything:with:param\"",
 *
 *  "zone_id""rMu2waTJPbHr4",
 *
 *  "created""2020-08-18 19:11:02.237 +0000 UTC",
 *
 *  "modified""2020-08-28 19:51:41.275 +0000 UTC"
 *
 *  },
 *
 *  {
 *
 *  "id""ed2416cb6bc8a8055b22222",
 *
 *  "type""A",
 *
 *  "name""www",
 *
 *  "value""1.1.1.1",
 *
 *  "zone_id""rMu2waTJPbHr4",
 *
 *  "created""2020-08-27 20:55:38.745 +0000 UTC",
 *
 *  "modified""2020-08-27 20:55:38.745 +0000 UTC"
 *
 *  }
 *
 *  ] } The command used above was copied from Hetzer DNS API docs. `jq` is used for formatting and is not required. Use the `id` to import a record.
 *
 * ```sh
 *  $ pulumi import hetznerdns:index/record:Record dkim_1 ed2416cb6bc8a8055b22222
 * ```
 */
export class Record extends pulumi.CustomResource {
    /**
     * Get an existing Record resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecordState, opts?: pulumi.CustomResourceOptions): Record {
        return new Record(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hetznerdns:index/record:Record';

    /**
     * Returns true if the given object is an instance of Record.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Record {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Record.__pulumiType;
    }

    /**
     * Name of the DNS record to create.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Time to live of this record.
     */
    public readonly ttl!: pulumi.Output<number | undefined>;
    /**
     * The type of the record.
     */
    public readonly type!: pulumi.Output<string>;
    public readonly value!: pulumi.Output<string>;
    /**
     * Id of the DNS zone to create
     * the record in.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a Record resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecordArgs | RecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecordState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as RecordArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Record.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Record resources.
 */
export interface RecordState {
    /**
     * Name of the DNS record to create.
     */
    name?: pulumi.Input<string>;
    /**
     * Time to live of this record.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The type of the record.
     */
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    /**
     * Id of the DNS zone to create
     * the record in.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Record resource.
 */
export interface RecordArgs {
    /**
     * Name of the DNS record to create.
     */
    name?: pulumi.Input<string>;
    /**
     * Time to live of this record.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The type of the record.
     */
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
    /**
     * Id of the DNS zone to create
     * the record in.
     */
    zoneId: pulumi.Input<string>;
}
