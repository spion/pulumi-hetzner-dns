// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # hetznerdns.Zone Resource
 *
 * Provides a Hetzner DNS Zone resource to create, update and delete DNS Zones.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hetznerdns from "@pulumi/hetznerdns";
 *
 * const zone1 = new hetznerdns.Zone("zone1", {
 *     ttl: 3600,
 * });
 * ```
 *
 * ## Import
 *
 * A Zone can be imported using its `id`. Log in to the Hetzner DNS web frontend, navigate to the zone you want to import, and copy the id from the URL in your browser.
 *
 * ```sh
 *  $ pulumi import hetznerdns:index/zone:Zone zone1 rMu2waTJPbHr4
 * ```
 */
export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hetznerdns:index/zone:Zone';

    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Zone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }

    /**
     * Name of the DNS zone to create. Must be a valid
     * domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
     * include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
     * rejects attempts to create a zone with a sub domain name. Use a record to
     * create the sub domain.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Time to live of this zone.
     */
    public readonly ttl!: pulumi.Output<number>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            if ((!args || args.ttl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Zone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    /**
     * Name of the DNS zone to create. Must be a valid
     * domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
     * include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
     * rejects attempts to create a zone with a sub domain name. Use a record to
     * create the sub domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Time to live of this zone.
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    /**
     * Name of the DNS zone to create. Must be a valid
     * domain with top level domain. Meaning `<domain>.de` or `<domain>.io`. Don't
     * include sub domains on this level. So, no `sub.<domain>.io`. The Hetzner API
     * rejects attempts to create a zone with a sub domain name. Use a record to
     * create the sub domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Time to live of this zone.
     */
    ttl: pulumi.Input<number>;
}
