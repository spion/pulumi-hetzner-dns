// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Hetznerdns
{
    /// <summary>
    /// ## # hetznerdns.Record Resource
    /// 
    /// Provides a Hetzner DNS Recrods resource to create, update and delete DNS Records.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Hetznerdns = Pulumi.Hetznerdns;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var zone1 = Output.Create(Hetznerdns.GetZone.InvokeAsync(new Hetznerdns.GetZoneArgs
    ///         {
    ///             Name = "zone1.online",
    ///         }));
    ///         var www = new Hetznerdns.Record("www", new Hetznerdns.RecordArgs
    ///         {
    ///             ZoneId = hetznerdns_zone.Z1.Id,
    ///             Value = "192.168.1.1",
    ///             Type = "A",
    ///             Ttl = 60,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// A Record can be imported using its `id`. Use the API to get all records of a zone and then copy the id.
    /// 
    /// curl "https://dns.hetzner.com/api/v1/records" \
    /// 
    /// -H 'Auth-API-Token$HETZNER_DNS_API_TOKEN' | jq . {
    /// 
    ///  "records"[
    /// 
    ///  {
    /// 
    ///  "id""3d60921a49eb384b6335766a",
    /// 
    ///  "type""TXT",
    /// 
    ///  "name""google._domainkey",
    /// 
    ///  "value""\"anything:with:param\"",
    /// 
    ///  "zone_id""rMu2waTJPbHr4",
    /// 
    ///  "created""2020-08-18 19:11:02.237 +0000 UTC",
    /// 
    ///  "modified""2020-08-28 19:51:41.275 +0000 UTC"
    /// 
    ///  },
    /// 
    ///  {
    /// 
    ///  "id""ed2416cb6bc8a8055b22222",
    /// 
    ///  "type""A",
    /// 
    ///  "name""www",
    /// 
    ///  "value""1.1.1.1",
    /// 
    ///  "zone_id""rMu2waTJPbHr4",
    /// 
    ///  "created""2020-08-27 20:55:38.745 +0000 UTC",
    /// 
    ///  "modified""2020-08-27 20:55:38.745 +0000 UTC"
    /// 
    ///  }
    /// 
    ///  ] } The command used above was copied from Hetzer DNS API docs. `jq` is used for formatting and is not required. Use the `id` to import a record.
    /// 
    /// ```sh
    ///  $ pulumi import hetznerdns:index/record:Record dkim_1 ed2416cb6bc8a8055b22222
    /// ```
    /// </summary>
    [HetznerdnsResourceType("hetznerdns:index/record:Record")]
    public partial class Record : Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the DNS record to create.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Time to live of this record.
        /// </summary>
        [Output("ttl")]
        public Output<int?> Ttl { get; private set; } = null!;

        /// <summary>
        /// The type of the record.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("value")]
        public Output<string> Value { get; private set; } = null!;

        /// <summary>
        /// Id of the DNS zone to create
        /// the record in.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Record resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Record(string name, RecordArgs args, CustomResourceOptions? options = null)
            : base("hetznerdns:index/record:Record", name, args ?? new RecordArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Record(string name, Input<string> id, RecordState? state = null, CustomResourceOptions? options = null)
            : base("hetznerdns:index/record:Record", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Record resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Record Get(string name, Input<string> id, RecordState? state = null, CustomResourceOptions? options = null)
        {
            return new Record(name, id, state, options);
        }
    }

    public sealed class RecordArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the DNS record to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Time to live of this record.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The type of the record.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        /// <summary>
        /// Id of the DNS zone to create
        /// the record in.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public RecordArgs()
        {
        }
    }

    public sealed class RecordState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the DNS record to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Time to live of this record.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The type of the record.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("value")]
        public Input<string>? Value { get; set; }

        /// <summary>
        /// Id of the DNS zone to create
        /// the record in.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public RecordState()
        {
        }
    }
}
